version: "3.8"
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka-network
    environment: 
      ALLOW_ANONYMOUS_LOGIN: yes
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 4s
      timeout: 3s
      retries: 15

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - kafka-network
    environment: 
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CLIENT://:9092,EXTERNAL://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka:9092,EXTERNAL://kafka:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9093"]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy

  temperature:
    build: ./producerN
    image: temperature
    deploy:
      mode: replicated
      replicas: 2
    networks:
      - kafka-network
    environment:
      MEAN: 15
      STD: 5
      LOWER: -5
      UPPER: 45
      SLEEP: 10
      TOPIC_NAME: sh-temperature
    depends_on:
      kafka:
        condition: service_healthy

  consumer:
    build: ./consumer
    image: consumer
    container_name: consumer
    networks:
      - kafka-network
    depends_on:
      kafka:
        condition: service_healthy
      temperature:
        condition: service_started
  
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports: 
      - "8086:8086"
    volumes:
      - influx-data:/var/lib/influxdb
    networks:
      - tick-network
    environment: 
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: sic
      DOCKER_INFLUXDB_INIT_BUCKET: tp2
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: LRk4Qb4QtnFqdn83kYDG-1EXsNRkhFGrdZqJQhfy2IOTN7IIyVhWdwEu8PeKlvhXDHomucMZVOpE7tAPLSx0xQ==
    healthcheck:
      test: "curl -f http://localhost:8086/ping"
      interval: 5s
      timeout: 10s
      retries: 5

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    # --user telegraf:$(stat -c '%g' /var/run/docker.sock) - n sei como fazer isso no compose
    user: "telegraf:996
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    networks:
     - tick-network
     - kafka-network
    healthcheck:
      test: "curl -f http://localhost:9090"
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy

volumes:
  influx-data:
    name: influx-data
    driver: local

networks:
  kafka-network:
    name: kafka-network
  tick-network:
    name: tick-network

