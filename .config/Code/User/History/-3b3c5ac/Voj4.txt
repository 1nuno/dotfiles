Ola professor,

Depois de aplicar as sugestões que deu o nosso ER (anexado neste email) ficou assim:

 

Eu só gostaria de confirmar se a forma como estamos a pensar faz sentido. Imaginemos a seguinte situação:

- Cliente entra na loja
- Cliente adiciona 1 maca e 2 peras ao carrinho
- Cliente efetua a compra

Assumindo que todas as tabelas na base de dados estão vazias (com exceção das tabelas category, manufacturer e item) as operações que ocorreriam na base de dados são:

- Cliente entra na lojaA forma que estamos a pensar sobre isso e que basicamente "entrar na loja" e simplesmente acessar ao nosso programa de testes de api, no nosso caso seria o Postman, portanto nós como clientes logo ao abrirmos o Postman e como se já estivessemos dentro do nosso website na nossa conta com o login já efetuado. Estamos cientes que se simplesmente abrirmos o Postman e não efetuarmos nenhum http request a api, a nossa tabela "client" continuará vazia ou seja tecnicamente ainda não somos clientes mas tendo em conta que não vamos implementar nenhuma feature relacionada ao login decidimos adotar esta convenção.

- Cliente adiciona 1 maca e 2 peras ao carrinhoNo enunciado do projeto existe um endpoint que temos de implementar - 4. Add Item to Shopping Cart (POST) - para adicionar itens ao nosso carrinho, sendo que, para o mesmo ser ativado temos que fazer um POST request para a seguinte url: https://localhost:8080/proj/api/cart. Inicialmente ficamos confusos pois olhando para a url (inclusive a request body do POST no enunciado) não temos efetivamente informação alguma sobre como identificar o id do "cart" ao qual vamos adicionar, afinal de contas podia ser qualquer cliente a fazer o request para aquela endpoint certo? Esta confusão deve-se ao facto de que até esse momento ainda não se havia adotado a convenção mencionada no ponto anterior pois a partir do momento em que a adotamos ficou claro que fazer requests no Postman e o mesmo que fazer requests de dentro do nosso site, mais especificamente de dentro da nossa conta de cliente e portanto o id do cart a que devemos adicionar e único, nesse caso o id do cart a que nos pertence. Seguindo esse raciocínio ao adicionarmos maçãs e peras ao carrinho o que acontece efetivamente na base de dados e:

1. Adicionamos a tabela "client" um novo cliente com um id auto-incrementado2. Criamos um carrinho associado a esse cliente na tabela "cart" com um id auto-incrementado
3. Adicionamos informação sobre os produtos e as quantidades presentes nesse carrinho na tabela "cart_item"
Ora, se realmente estamos a seguir um raciocínio correto até agora os passos descritos acima tem alguma implicações:Na nossa base de dados nunca vão existir clientes que tenham a informação do nome e email preenchidas (volto a repetir que estamos a assumir que o programa começa com a tabela "client" vazia) isto porque segundo a lógica que vimos até agora nós assumimos que o cliente ao abrir o postman já está com o login feito e em principio ja havia de ter lá na base de dados informação sobre o seu nome e email mas como explicamos no primeiro ponto (- cliente entra na loja) não é esse o caso.Tendo em conta o que vimos até agora seria normal e até mesmo lógico assumir que a jornada do cliente seria 1. entrar no site, 2. adicionar itens no carrinho e 3. comprar os itens que estão nesse carrinho, portanto o óbvio próximo passo agora seria implementar um endpoint que nos permitisse a nós como clientes pegar no carrinho que já criamos, já com os produtos que fomos adicionando enquanto passeávamos pela loja e efetuar a compra, no entanto como já vamos ver no ponto seguinte (- Cliente efetua a compra) o processo de compra especificado pelo enunciado (9. Purchase Items (POST)) não nos permite aproveitar os carrinhos já criados pelo que temos que criar um novo carrinho no request body do POST, ou seja, podemos adicionar e remover itens do nosso carrinho mas não existe nenhuma feature que nos permita levar esse mesmo carrinho a fase final que nesse caso seria a compra dos produtos contidos nele.


- Cliente efetua a compra